Alphabet:

a.Upper (A-Z) and lower case letters (a-z) of the English alphabet
b.Underline character '_';
c.Decimal digits(0-9);

1.Lexic:
a.Special symbols, representing:
-operators  + - * / = < <= >= >
-separators   [] {} ; space ()
-reserved words   char int boolean real input print if else break for while

b.identifiers

identifier = letter{letter|digit}
letter := "A" | "B" | ... | "Z"
digit := "0" | "1" | ... | "9"

c. constants

	1. integer

nzDigit := "1" | "2" | ... | "9"
intNo := "0" | ["+" | "-"] nzdigit {"0" | nzDigit}

	2. character

charConst :=  "'" {letter | digit | special_symbol} "'"
special_symbol := "_" | "." | "," | "!" | "@"| "#"| "$" | "%" | "^" | "&" | "*" | "-" | " +" | "="

	3. string

stringConst := """ {letter | digit | special_symbol} """


2. Syntax

program := decllist ";" | stmtlist ";"
decllist := declaration | declaration ";" decllist
declaration := type1 IDENTIFIER ";" | arraydecl
type1 := "boolean" | "char" | "int" | "real"
arraydecl := type1 IDENTIFIER "[" nr "]" ";"
type := type1 
cmpdstmt := "{" stmtlist "}"
stmtlist := stmt | stmt ";" stmtlist
stmt := simplestmt | structstmt
simplestmt := assignstmt | iostmt ";"
assignstmt:= IDENTIFIER "=" expression ";"
expression := expression addition term | term
term := term multiplication factor | factor
factor := "(" expression ")" | IDENTIFIER
addition := "+" | "-"
multiplication := "*"|"/"
iostmt := "INPUT" IDENTIFIER | "PRINT" "(" IDENTIFIER ")"
structstmt := cmpdstmt | ifstmt | whilestmt
ifstmt := "IF" "(" condition ")" "{" stmt "}" "ELSE" "{" stmt "}"
whilestmt := "WHILE" "(" condition ")" "{" stmt "}"
condition := expression RELATION expression
RELATION :=  “<” | “<=” | “==” | “<>” | “>=” | “>”